let drawSquircle=(e,t,i,l,r,s)=>{let h=r/2;e.beginPath(),e.lineTo(i[0],h),e.lineTo(t.width-i[1],h),e.bezierCurveTo(t.width-i[1]/l,h,t.width-h,i[1]/l,t.width-h,i[1]),e.lineTo(t.width-h,t.height-i[2]),e.bezierCurveTo(t.width-h,t.height-i[2]/l,t.width-i[2]/l,t.height-h,t.width-i[2],t.height-h),e.lineTo(i[3],t.height-h),e.bezierCurveTo(i[3]/l,t.height-h,h,t.height-i[3]/l,h,t.height-i[3]),e.lineTo(h,i[0]),e.bezierCurveTo(h,i[0]/l,i[0]/l,h,i[0],h),e.closePath(),r?(e.strokeStyle=s,e.lineWidth=r,e.stroke()):(e.fillStyle=s,e.fill())};class SquircleClass{static get contextOptions(){return{alpha:!0}}static get inputProperties(){return["--squircle-radius","--squircle-radius-top-left","--squircle-radius-top-right","--squircle-radius-bottom-right","--squircle-radius-bottom-left","--squircle-smooth","--squircle-outline","--squircle-fill"]}paint(e,t,i){let l;let r=parseFloat(10*i.get("--squircle-smooth")),s=SquircleClass.inputProperties.slice(1,5).map(e=>{let t=i.get(e);return t?1.8*parseInt(t,10):NaN});if(s.some(isNaN)){let e=i.get("--squircle-radius").toString().match(/([0-9]+[a-z%]*)/g);if(e)for(l=e.map(e=>1.8*parseInt(e,10));l.length<4;)1===l.length?l.push(l[0]):2===l.length?l=[l[0],l[1],l[0],l[1]]:3===l.length&&(l=[l[0],l[1],l[2],l[1]]);else{let e=s.every(isNaN)?14.4:0;l=[e,e,e,e]}}s=s.map((e,t)=>isNaN(e)?l[t]:e);let h=parseFloat(i.get("--squircle-outline"),10),a=i.get("--squircle-fill").toString(),u=()=>void 0===i.get("--squircle-smooth")[0]?10:0===r?1:r,o=()=>h?h:0,g=()=>a?a:"#f45",n=Math.max(...s);if(n<t.width/2&&n<t.height/2)drawSquircle(e,t,s,u(),o(),g());else{let i=Math.min(t.width/2,t.height/2);drawSquircle(e,t,s.map(()=>i),u(),o(),g())}}}"undefined"!=typeof registerPaint&&registerPaint("squircle",SquircleClass);